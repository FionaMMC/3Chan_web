<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %} 
<!DOCTYPE html>
<html lang="en">
<head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100..900&display=swap" rel="stylesheet">
    <title>Login Page</title>
    <style>
        body {
            background-color: black; 
            display: flex;
            flex-direction: column; 
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            font-family: 'Montserrat', sans-serif; 
            color: white;
        }
        #loginForm {
            background: rgba(255, 255, 255, 0.3); 
            padding: 20px 70px; 
            border-radius: 16px; 
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(25px);
            text-align: center;
            margin-right:370px;
            margin-top:200px;
        }
        label {
            display: block;
            margin-bottom: 5px;
        }
        input, button {
            width: 100%; 
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: none;
        }
        button {
            background-color: #1e81b0;
            color: white;
            font-size: 16px;
        }
        #spline-container {
            align-self: flex-end; 
            width: 70%; 
            height: 70vh; 
            margin-top: -430px;
            margin-right: -30px;
            z-index: -2;
        }
        #particles {
            position: fixed; 
            top: 0; 
            left: 0; 
            width: 100vw; 
            height: 100vh; 
            margin-right: -30px;
            z-index: -3; 
          }
        
    </style>
    <div id="loginForm">
        <h1>Login</h1>
        <label for="username">Username</label>
        <input id="username" type="text" placeholder="Username">
        <label for="password">Password</label>
        <input id="password" type="password" placeholder="Password" autocomplete="current-password">
        <button onclick="login()">Login</button>
    </div>
    <div id="spline-container">
        <script type="module" src="https://unpkg.com/@splinetool/viewer@1.2.5/build/spline-viewer.js"></script>
        <spline-viewer loading-anim-type="spinner-small-light" url="https://prod.spline.design/iKq0LVJ0OEgcqScY/scene.splinecode"></spline-viewer>
    </div>
    <div id = "particles">
        <script type="module" src="https://unpkg.com/@splinetool/viewer@1.2.5/build/spline-viewer.js"></script>
        <spline-viewer url="https://prod.spline.design/qKlslVsAsCakfQFh/scene.splinecode"></spline-viewer>
    </div>


    <script src="/static/js/libs/socket.io.min.js"></script>
    <script>

        const socket = io();

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        // login function to well login...
        async function login() {
            // this fancy syntax is part of the Jinja syntax
            // login_user is a Python function, this gets the URL that calls that Python function
            // you know the one with the:
            // app.route("/login/user", methods=["POST"])
            // login_user()
            // so... "{{ url_for('login_user')}}" 
            // gives us -> "http://blabla/login/user"
            let loginURL = "{{ url_for('login_user') }}";
            let username = $("#username").val();
            let password = $("#password").val();

            try {
                // hash the password
                let hashedPassword = await requestSaltAndHash(username, password);
                console.log("(In login) post username and hashedPassword: ", {username, hashedPassword});

                // axios post is a fancy way of posting a request to the server,
                // we pass in the username and password here
                let res = await axios.post(loginURL, {
                    username,
                    password: hashedPassword
                });

                console.log("(In login) url and token received from server: ", {url:res.data.url, token:res.data.token});

                let token = res.data.token;
                let url = res.data.url;

                // if the server sends in an error message, alert() the error message
                if (!isValidURL(url)) {
                    alert(res.data.url);
                    return;
                }

                Cookies.set("token", token);
                Cookies.set("password", password);

                // redirects to the URL (ie. res.data),
                // we use _self here since we all hate that moment
                // when the browser opens a new tab
                window.open(url, "_self");
            } catch (error) {
                console.log("(In login) Error requestSaltAndHash: ", error);
            }
        }

        function requestSaltAndHash(username, password) {
            console.log("(In requestSaltAndHash) get_salt emitted with ", username)
            socket.emit('get_salt', username);

            return new Promise((resolve, reject) => {
                socket.once('salt_response', function(data) {
                    console.log("(In requestSaltAndHash) salt response received:", data);

                    if (data.error) {
                        console.log("Error getting public key:", data.error);
                        alert("Error: User does not exist!");
                        reject(data.error); // reject Promise when error
                        return;
                    }

                    const salt = data.salt;
                    const hashedPassword = CryptoJS.SHA256(password + salt).toString(CryptoJS.enc.Hex);
                    resolve(hashedPassword);
                });
            });
        }
    </script>
</body>
</html>
{% endblock %}